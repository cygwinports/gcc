--- libgcc/config/i386/cygming-crtbegin.c	(revision 196430)
+++ libgcc/config/i386/cygming-crtbegin.c	(working copy)
@@ -46,15 +46,33 @@
 #define LIBGCJ_SONAME "libgcj_s.dll"
 #endif
 
-
+#if DWARF2_UNWIND_INFO
 /* Make the declarations weak.  This is critical for
    _Jv_RegisterClasses because it lives in libgcj.a  */
-extern void __register_frame_info (const void *, struct object *)
+extern void __register_frame_info (__attribute__((unused)) const void *,
+				   __attribute__((unused)) struct object *)
 				   TARGET_ATTRIBUTE_WEAK;
-extern void *__deregister_frame_info (const void *)
+extern void *__deregister_frame_info (__attribute__((unused)) const void *)
 				      TARGET_ATTRIBUTE_WEAK;
-extern void _Jv_RegisterClasses (const void *) TARGET_ATTRIBUTE_WEAK;
+TARGET_ATTRIBUTE_WEAK void
+__register_frame_info (__attribute__((unused)) const void *p,
+		       __attribute__((unused)) struct object *o)
+{}
 
+TARGET_ATTRIBUTE_WEAK void*
+__deregister_frame_info (__attribute__((unused)) const void *p)
+{ return NULL; }
+#endif /* DWARF2_UNWIND_INFO */
+
+#if TARGET_USE_JCR_SECTION
+extern void _Jv_RegisterClasses (__attribute__((unused)) const void *)
+  TARGET_ATTRIBUTE_WEAK;
+
+TARGET_ATTRIBUTE_WEAK void
+_Jv_RegisterClasses (__attribute__((unused)) const void *p)
+{}
+#endif /* TARGET_USE_JCR_SECTION */
+
 #if defined(HAVE_LD_RO_RW_SECTION_MIXING)
 # define EH_FRAME_SECTION_CONST const
 #else
--- libgcc/config/i386/cygwin.S	(revision 196430)
+++ libgcc/config/i386/cygwin.S	(working copy)
@@ -32,7 +32,7 @@
 # define cfi_adjust_cfa_offset(X) 	.cfi_adjust_cfa_offset X
 # define cfi_def_cfa_register(X)	.cfi_def_cfa_register X
 # define cfi_register(D,S)		.cfi_register D, S
-# ifdef _WIN64
+# ifdef __x86_64__
 #  define cfi_push(X)		.cfi_adjust_cfa_offset 8; .cfi_rel_offset X, 0
 #  define cfi_pop(X)		.cfi_adjust_cfa_offset -8; .cfi_restore X
 # else
@@ -57,7 +57,7 @@
 
 	.global ___chkstk
 	.global	__alloca
-#ifdef _WIN64
+#ifdef __x86_64__
 /* __alloca is a normal function call, which uses %rcx as the argument.  */
 	cfi_startproc()
 __alloca:
@@ -123,7 +123,7 @@
 	pushl	4(%eax)
 	ret
 	cfi_endproc()
-#endif /* _WIN64 */
+#endif /* __x86_64__ */
 #endif /* L_chkstk */
 
 #ifdef L_chkstk_ms
@@ -131,7 +131,7 @@
    We avoid clobbering any registers.  Unlike ___chkstk, it just probes the
    stack and does no stack allocation.  */
 	.global ___chkstk_ms
-#ifdef _WIN64
+#ifdef __x86_64__
 	cfi_startproc()
 ___chkstk_ms:
 	pushq	%rcx			/* save temps */
@@ -183,5 +183,5 @@
 	cfi_pop(%ecx)
 	ret
 	cfi_endproc()
-#endif /* _WIN64 */
+#endif /* __x86_64__ */
 #endif /* L_chkstk_ms */
--- libgcc/config.host	(revision 196430)
+++ libgcc/config.host	(working copy)
@@ -564,13 +564,30 @@
 		tmake_eh_file="i386/t-dw2-eh"
 	fi
 	# Shared libgcc DLL install dir depends on cross/native build.
-	if test x${build} = x${host} ; then
+	if test x${host} = x${target} ; then
 		tmake_dlldir_file="i386/t-dlldir"
 	else
 		tmake_dlldir_file="i386/t-dlldir-x"
 	fi
 	tmake_file="${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-cygwin i386/t-crtfm i386/t-chkstk t-dfprules"
 	;;
+x86_64-*-cygwin*)
+	extra_parts="crtbegin.o crtend.o crtfastmath.o"
+	# This has to match the logic for DWARF2_UNWIND_INFO in gcc/config/i386/cygming.h
+	if test x$enable_sjlj_exceptions = xyes; then
+		tmake_eh_file="i386/t-sjlj-eh"
+	else
+		tmake_eh_file="i386/t-seh-eh"
+	fi
+	# Shared libgcc DLL install dir depends on cross/native build.
+	if test x${host} = x${target} ; then
+		tmake_dlldir_file="i386/t-dlldir"
+	else
+		tmake_dlldir_file="i386/t-dlldir-x"
+	fi
+	# FIXME - dj - t-chkstk used to be in here, need a 64-bit version of that
+	tmake_file="${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-cygming i386/t-cygwin i386/t-crtfm t-dfprules i386/t-chkstk"
+	;;
 i[34567]86-*-mingw*)
 	extra_parts="crtbegin.o crtend.o crtfastmath.o"
 	case ${target_thread_file} in
@@ -1143,7 +1160,8 @@
   i[34567]86-*-linux* | x86_64-*-linux* | \
   i[34567]86-*-gnu* | \
   i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]* | \
-  i[34567]86-*-cygwin* | i[34567]86-*-mingw* | x86_64-*-mingw* | \
+  i[34567]86-*-cygwin* | x86_64-*-cygwin* | \
+  i[34567]86-*-mingw* | x86_64-*-mingw* | \
   i[34567]86-*-freebsd* | x86_64-*-freebsd* | \
   i[34567]86-*-openbsd* | x86_64-*-openbsd*)
   	tmake_file="${tmake_file} t-softfp-tf"
